# name: Deploy Application Docker Image to EC2 instance
# on:
#   push:
#     branches: [main]

# jobs:
#   Continuous-Integration:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

#       - name: Log in to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Build, tag and push image to Amazon ECR
#         id: build-image
#         env:
#           ECR_REGISTRY: ${{steps.login-ecr.outputs.registry}}
#           ECR_REPOSITORY: ${{ secrets.ECR_REPO }}
#           IMAGE_TAG: latest
#         run: |
#           docker build -t ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG} .
#           docker push ${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}
#           echo "::set-output name=image::${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

#   Continuous-Deployment:
#     runs-on: self-hosted
#     needs: Continuous-Integration
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v3

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v1
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

#       - name: Login to Amazon ECR
#         id: login-ecr
#         uses: aws-actions/amazon-ecr-login@v1

#       - name: Run Docker Image to server users
#         run: |
#           docker run -d -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" -e AWS_DEFAULT_REGION="${{secrets.AWS_DEFAULT_REGION}}" -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY}}" -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" -p 8080:8080 ${{steps.login-ecr.outputs.registry}}/${{secrets.ECR_REPO}}:latest
stages:
  - build
  - deploy

variables:
  IMAGE_TAG: latest
  ECR_REGISTRY: "<your-aws-account-id>.dkr.ecr.<region>.amazonaws.com"
  ECR_REPOSITORY: "<your-ecr-repo-name>"

before_script:
  - apk add --no-cache curl jq python3 py3-pip
  - pip3 install awscli
  - aws --version
  - echo "Logging into ECR..."
  - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY

build:
  stage: build
  script:
    - docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
    - docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

deploy:
  stage: deploy
  only:
    - main
  script:
    - echo "Deploying to EC2..."
    - apk add --no-cache openssh
    - chmod 600 deploy-key.pem
    - ssh -o StrictHostKeyChecking=no -i deploy-key.pem ec2-user@<your-ec2-public-ip> <<EOF
      aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
      docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      docker stop my-app || true && docker rm my-app || true
      docker run -d --name my-app -p 8080:8080 \
      -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
      -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
      -e AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION \
      -e OPENAI_API_KEY=$OPENAI_API_KEY \
      -e PINECONE_API_KEY=$PINECONE_API_KEY \
      $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
